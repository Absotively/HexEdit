WHAT's NEW
----------

HexEdit has always been renowned for its innovative features.  Many other hex editors have copied them and even claim to have invented them.  For example, here are some of our firsts:

+ first hex editor to allow editing of files of any size (most are still limited to less than 4 Gbytes)
+ first hex editor to introduce an advanced template system (which is still more advanced than any other)
+ first hex editor to parse C/C++ source code to build templates
+ first hex editor to allow undo of everything (not just file edits)
+ first hex editor to have comprehensive help including tutorials
+ first hex editor to format numbers nicely using commas for decimals and spaces for hex





EDIT
----

* supports all standard (and defacto) keys
* autoscrolling (with acceleration)
* unlimited undo
  * undo everything (not just file changes)
* many editing tasks are simplified using the "mark"
* exceptional large file editing
  * edit files of any size
  * instantly insert large files
  * save in place even with insertions/deletions
* view byte(s) at cursor in many different formats
  * character sets/integer/floats/dates etc
  * see Properties dialog for details
* view customizable tip window
  * bookmark/integer/floats/dates/chars etc
  * calculate any expression
  * see Info Tips for details
* full clipboard support
  * binary data (same cb format as Visual Studio)
  * Paste As EBCDIC/Unicode/ASCII
  * Copy As Hex Text converts each byte to 2 hex digits
  * Copy As C source with many options
  * Write selection to file (overwrite or append)
* easy to use but powerful searching
  * see Searching
* file compare including highlighter for differences
* easy to use but powerful jumps
  * hex and decimal jump histories
  * see jump tool and calculator
* open files read-only
* open files non-exclusively
* quickly toggle INS mode (overwrite vs insert)
* quickly toggle RO mode (read-only vs read-write)
* numerous operations are supported on selection
  * conversions between ASCII and EBCDIC
  * case conversion (using current character set)
  * encryption
  * checksums, CRC and MD5
  * comprehensive support for zlib compression
  * unary ops: increment, decrement, negate etc
  * binary ops (using calculator for other operand)
* change tracking shows inserted/deleted/replaced bytes
* Keep Same Times option
* view/edit physical disks and logical volumes
  * flash disks, floppies, CDs etc
* select with mouse, keyboard or calculator
  * non-contiguous selections using highlighter

The power of HexEdit comes from its editing capabilities.  The features are too numerous to be described in detail here so this is just an overview, but click on any of the linked topics you are interested in to find out more.

Although powerful HexEdit is amazingly easy to use.  Users comment that the features are very well thought out, and the developers actually use the sofware!  Moreover, the editing capabilities are designed to work together allowing you to easily and intuitively accomplish complex tasks.

The first thing to note is that you will feel right at home with the user interface.  HexEdit uses standard, or defacto standard, behaviour in all user interface elements.  And if there is a similar concept in other software then HexEdit will behave in the same way when it makes sense.

Here are some basic examples:

+ Common cursor movement keys: Arrows, Ctrl+Arrows (move by groups), Home, End, PgUp, Ctrl+Home etc
+ mouse wheel scrolls vertically, Shift+mouse scrolls horizontally, Ctrl+Mouse for "zoom"
+ Shift + cursor movement keys to select
+ Select with mouse, including Shift+click to extend the selection
+ selection autoscroll when moving past edge of window (with acceleration as you move further)

Many behaviours are borrowed from other hex editors, text editors, Microsoft Office (esp. Word), and Visual Studio.

+ right-click any file's tab for a context menu of common file commands
+ double-click status bar panes to toggle modes (INS/OVR, RO/RW, REC, etc) as in MSWord
+ Ctrl+F2 to set a bookmark, F2 and Shift+F2 to move between bookmarks as in Visual Studio
+ the "mark" was borrowed from Emacs and facilitates many operations
+ keystroke macros are available as seen in many text editors
+ ctrl+F3 searches for the next occurrence of selected bytes as in Visual Studio
+ highlighter as in MSWord


- but we have no hesitation in improving and enhancing these ideas.
- undo undoes everything
- mark
- jumping
- large files


See also Display, Undo, Bookmarks, Highlighter, Clipboard, Info Tips, Properties, Operations, Search, Jump Tools, Large Files.

xxx




xxx

The "mark" is a simple but useful tool.  Other hex editors do not provide a "mark" or equivalent, but try to use the selection or other systems to accomplish similar things.  However, once you are familiar with how the mark works it makes many things much easier.

You can set the position of the mark by using the Edit/Mark/Mark Position menu item, but a quicker way is to simply double-click the byte in either the hex or character area.  (This assumes you have not overridden the default behaviour of the mouse double-click in the Mouse page of the Customization dialog.)  Also note that the mark is attached to a byte, not a location, and so will move if bytes are inserted or deleted before it in the file.

The simplest and most obvious use for the mark is to save a position so you can jump back to it later.  (However, with the advent of the highlighter, bookmarks etc this is less useful.)  Another use is for measuring the distance between two locations in a file - the distance from the current cursor position to the mark is continually updated (in both hex and decimal) in the status bar.

One place that the mark can be invaluable is in keystroke macros.  Using the "Swap Cursor and Mark" and "Extend to Mark" commands make certain things easier or even possible.  You can also use the calculator to get the location of the mark plus change its position etc, which is also useful in macros.

The position of the mark is shown using a different background colour (which can be set in the Colour Options page).  In HexEdit 3.0 you can set the colour of the mark separately from the colour of bookmarks.

Finally, the mark is useful when searching a large file since you can limit the scope of the search (using the "To Mark" scope).  Other hex editors allow you to limit a search to the current "selection", but we find this cumbersome as it is easy to accidentally move or remove the selection and also after a search HexEdit automatically selects the found bytes so you can perform other operations on them. 
xxx


Undo

The first text editors that I found tolerable, even enjoyable, for programming were Brief (MSDOS) and Epsilon (UNIX).  (Up till then I had used some really attrocious editors including ed, vi, and even Wordstar.)  The best thing about these editors was that they had undo.  It was a full undo system, where virtually anything you did was undoable, not just things that changed the file.  Most importantly, this included cursor movements and selections.

Today almost all editors, word processors and hex editors include undo.  However, most of them have a system where only changes are undone.  This includes Microsoft Word, latest vi versions, NotePad, WordPad etc, and even the editor I am using now (NoteTab).  Visual Studio (6) has an option to include cursor movements in the undo list, but that does not work very well and you can tell it was just an afterthought - for example, you cannot undo selections.

One thing I find really annoying is if you have spent some time working out the ends of a large block of text and selecting it and then accidentally hit a cursor key which loses the selection.  You then have to go back and do it all again in most editors (and all hex editors I have tried).  In HexEdit, just hit undo and the selection is restored!

Undo Changes

I must admit there are times when it is tedious to wade back through hundreds of cursor movements just to undo the last change to the file.  This is why HexEdit includes the "undo changes" command.

Actually HexEdit goes further in that it has "intelligent undo".  If you move the cursor right then realise that was not what you wanted and move it left, HexEdit will recognise this and treat the cursor left movement as an undo of the cursor right movement, hence it is removed from the undo stack.  I was worried that this system would be confusing (particularly as I have never seen it in any other software) but it works extremely well in practice.

Note that HexEdit has no "redo" facility as it is something that I personally have never had a need for.  Very rarely do I ever undo too much.  It would be easy to add, but nobody has ever asked for it.

xxx


JUMP TOOLS

xxx
The hex and decimal jump tools are extremely flexible and powerful.

Quickly Remember an Address

You have probably already noticed that as you move the cursor in a file the hex and decimal jump tools update to display the current address.  If you want to remember the current address you can simply click in the tool and press Enter.  This will store the address in the drop-down history list so that you can later select it to return to the same place.

(Other ways to remember an address are to set the mark by double-clicking, set an unnamed bookmark using Ctrl+F2, or use the highlighter.)


Permanently Remember an Address

HexEdit 2.5 added the ability to evaluate C-like expressions to the jump tools.  An expression may assign to a variable.  Variables do not need to be declared but are created, if necessary, when assigned to.

Since variable values are retained between HexEdit sessions you can quickly save the current address by clicking on the jump tool and prepending "name=", then press Enter.  For example, if you found a problem in a file at address 123456 you can quickly remember this address by typing "bad_data=123456" in the jump (decimal) tool.  Then any time in the future you can type "bad_data" in a jump tool to jump to address 123456.

(Actually, a better way may be to assign a bookmark to the address.  You can use a bookmark name in the jump tools just like a variable name.  Since only bookmarks for the current file are used this will avoid jumping to the correct address but in the wrong file.)


Base Conversion

If you have both a decimal and a hex jump tool visible (as you would by default with the Edit toolbar displayed), you can use them as a quick base conversion facility.  Typing a decimal value in the jump decimal tool will display the corresponding hex value in the jump hex tool, and vice versa.

(You can also use the calculator to do base conversion between binary, octal, decimal and hex.)

Expression Evaluation

As I mentioned above you can evaluate a C-like expression in the jump tools.  This can be used as a powerful calculator - when you press Enter the expression is evaluated and the result displayed.  Actually the expression in evaluated as you type and displayed in any other visible jump tool.  So if you have 2 decimal jump tools visible you can type an expression into one and see the result in the other as you type.

An expression may assign to a persistent variable (or even an array element) for later use.  Variables are created when assigned to, using the type of the expression assigned (which may be integer, string, float or boolean).  Note that you will get an error message when you press Enter if the type of the whole expression does not evaluate to an integer since HexEdit tries to use the value to jump to an address.

Since most of the normal C operators are supported, including arithmetic (+, * etc), shifts, bitwise boolean (&, |, ~, ^), comma operator, ternary operator (?:) etc, this makes the jump tool a powerful calculator.   Comparison (== etc) and boolean (&& etc) operations return a boolean result which is useful when used with the ternary (?:) operator. 
xxx

BOOKMARKS

xxx


Bookmarks can be invaluable when working will large amounts of data.  But the bookmark systems used in all the editors, hex editors and word processors I have tried have one or more deficiencies.  Here I describe the ideal system (which HexEdit implements).

Bookmarks must be file independent.  Many programs (eg Word) use file specific bookmarks.  But you really want to be able to set a bookmark and not have to remember which file you set it in.  If you have many files with similar names this is particularly important.

Bookmarks must be persistent.  The really annoying things about Visual Studio's unnamed bookmarks are that they disappear when you close the file.

You should be able to name bookmarks, but also quickly create unnamed ones.  Also you need to be able to see all your bookmarks sorted by name.  Moreover, bookmarks need to be available in a modeless dialog, so you can quickly jump to one or add a new one.  Word and Visual Studio bookmarks dialogs are annoying in this regard.

I also dislike the Visual Studio (6) approach of having two different sets of bookmarks (named and unnamed).  In HexEdit you can quickly create unnamed bookmarks and these are added to the normal bookmarks list but given names like "unnamed000", "unnamed001" etc.  Further, you can use the Bookmarks Tool (Navigate toolbar) to see the current closest bookmark in the file or to jump to any bookmark from the active file by selecting it from the drop-down list.

One of the most annoying things is when you create a bookmark but can't remember what you called it.  HexEdit not only keeps track of a bookmark's name but also the date and time you modified (created or moved) it and when you last jumped to it.  You can sort on these times in the Bookmarks dialog to try to find a bookmark whose name you have forgotten.  Actually you can sort on any column such as bookmark name, file name, address etc too.
xxx

PRINTING

xxx
xxx
If you are like me you sometimes find it difficult to inspect a binary file on screen, particularly if the file is large and the important information is dispersed throughout it.  In this situation bookmarks and the highlighter can be very handy but sometimes I just have to print out the relevant parts on paper.

Many files contain important bits separated by masses of nul (00) bytes.  If you print out such a file in other hex editors you get pages and pages full of zeroes.  You could just select each of the relevant bits and print them individually using the "Print Selection" option.  But this is tedious to do and means each little bit is printed on a separate page.

A simpler way is to simply select all of the relevant part of the file then use the HexEdit "Merge and Count Repeated Lines" option when printing the selection.  It actually works for any repeated byte, not just nul bytes, such as large blocks of FF's.

Obviously it saves paper, but it can also save time (waiting for the printer).  I have even found it saves time later, by not having to flip through masses of pages filled with 00's.  

Further, it will work with any repetition of lines.  For example, if you had a database file (with a fixed record size, as most do) and there were a large number of repeated records, you could simply set the line width in HexEdit to the record size.  Then when you print, the result will neatly show the records that are different (as well as counting the repeated records for you).

xxx

PROPERTIES

One of the most useful facilities that HexEdit has had from version 1.0 is the Properties dialog.


See also Info Tips.

xxx

Most hex editors show some information in the status bar about the current byte, such as its value in decimal, octal or binary.  Some even have a separate area of the display (sometimes called "Inspector") that shows more information, and you may even be able to configure what you see.  However, none have the power and simplicity of HexEdit's Properties dialog.

The Properties dialog is a tabbed dialog (or what Microsoft calls a property sheet).  To see relevant information, just click the tab to flip to the page of interest (eg, File, Byte, Decimal, Floating Point etc) then perhaps adjust a few controls (for example the big-endian checkbox) to see exactly the information you are after.  This design allows HexEdit to show data in many more ways than other hex editors but in a very small amount of screen space and with a minimum of fuss (no changing settings in the Options dialog etc).

As an example of the variety of facilities, you can display integers (decimal) in 4 different sizes (8, 16, 32 and 64 bit), and 4 different formats (unsigned, signed-2's complement, signed-1's complement and signed-sign+magnitude), and big- or little-endian.  Hence you can view integers in 32 different ways (4x4x2).  Similarly, you can view floating point numbers in 10 ways, dates in 15 different formats etc.

One problem with modeless dialogs, even small ones, is that they can get in the way.  The Properties dialog (like all HexEdit modeless dialogs) will move out of the way if you move the cursor in the active window towards it.  Or you can simply close the dialog altogether, and later reopen it by using the View/Properties menu item (or double-clicking the byte-properties pane of the status bar).

New Docking and Roll-Up Capabilities

New in HexEdit 3.0 is the ability to dock the Properties dialog onto the side of the main window so it does not obscure any file data, or it can be rolled up when not needed (just displaying as the window title bar).

Editing Values

Finally, one of the really nice features is that you can edit the values.  You can change any integer, floating-point, or date value in any of the supported formats.  You can even toggle individual bits by double-clicking them in the Binary field of the Byte page.

Modifying dates is particularly cool since you can change them using the standard Windows date/time controls, including a drop-down calendar control showing days of the month and months of the year.  You can also set date fields to special values like "Now" (current date and time) or first and last valid date/time values for the format in use etc. 
xxx

COLOR

xxx
You can completely customize the colors in the window display using HexEdit color schemes.  (Some things, such as title bar color are controlled by Windows - just use the Display options of the Control Panel to change those.)  HexEdit even allows you to save an unlimited number of different color schemes and easily select a different one using the drop-down list on the Standard toolbar.  Of course, HexEdit remembers the scheme you last used when you reopen a file.

Color schemes are much more useful than simply allowing you to make pretty displays.  If you use a "default" color scheme with a particular file then when you switch between character sets the color scheme automatically changes to match.  For example, switching to EBCDIC mode changes the color scheme to "EBCDIC default".  Not only does this allow you to spot illegal EBCDIC characters (using "groups" discussed below), but provides an instant visual cue as to what mode you are in, since (unless you have modified their colors) the default color schemes have slightly different background colors.

The feature that is found most useful though, is the ability to set up different color "groups" or sets of byte values to be displayed in different colors.  This allows you to easily spot oddities and patterns.  For example, the "ASCII default" color scheme displays any byte that is not a normal printable ASCII character and is not a carriage-return, line-feed, or tab character in bright red - allowing you to easily spot unlikely byte values in a text file.

The different character background colors (mark, bookmarks, background search occurrences, highlighter, etc) can also be changed.  Since HexEdit 2.5 these colors are blended so one thing cannot hide another.  For example, if bookmarks are blue and highlighter is yellow then the background for bookmarked bytes in a highlighted section is green (blue and green blended together).  The default colours have been carefully chosen, for example, so that the bookmark+highlight color is a different green to the background search occurrences green.

xxx

SEARCH

xxx
Searching is one of the most common tasks.  There are two main features:

1. Find Tool which appears on the Edit bar (which by default is the 2nd toolbar in the main HexEdit window)
2. Find dialog which is a modeless dialog with 5 pages and many powerful options

The quickest way to do a search is to click of the "Find tool", type in the hex digits and press Enter.  You can also search for text (ASCII or EBCDIC depending on the character display mode) by preceding the search string with an equals "=" (or a tilde "~" for a case-insensitive search).  You can also repeat the last search by pressing F3 or repeat other previous searches by selecting them from the Find tool's drop-down history list.

A quick way to search for the next occurrence of some bytes in the file is to select the bytes and press Ctrl+F3.  You can change this shortcut using the keyboard customization but Ctrl+F3 is used in Visual Studio and other software for this purpose.

More powerful searching (and replacing) can be performed with the Find dialog.  Since the dialog is modeless it is almost as easy to use as the Find tool, the disadvantage being that it takes up screen space.  However, it gets out of the way of the cursor/selection in the current file (like all modeless dialogs in HexEdit), and is easy enough to hide and bring back (eg double-click the "search occurrences" pane of the status bar).  Further, in HexEdit 3.0 the dialog is dockable and roll-upable.

The Find dialog has specialised pages allowing for hex searches, text searches, number searches and replace operations.  The pages are all integrated.  For example, typing text to search for in the "Text" page will also change the hex digits in the "Hex" page correspondingly (based on the selected character set) as well as update the search text in the "Basic" and "Replace" pages.  The Find tool is similarly integrated with the Find dialog.

The "Basic" page lets you search for hex digits or text, much like the Find tool, but also has scope and direction options as well as "whole word" and "match case" options when it thinks you are doing a text search.

The "Text" page supports even more options than the "Basic" page, such as specifying the character set and using a wildcard character (that matches any byte).

The "Hex" page also allows a wildcard that matches any nybble or you can even specify exactly which bits are used/ignored in a search using a mask.  The alignment options ("Hex" and "Number" pages) are also very useful in certain circumstances.

All pages support the four different scopes.  The most commonly used scope is "to end of file" (which changes to "to start of file" if direction is "up").  The "whole file" option is simply a convenience, since it saves you jumping to start of file (or end of file if direction is up) before starting the search - after the first occurrence is found it then switches to "to end of file" scope so you don't keep finding the same thing.  The search scope of "to mark" is very useful if you only want to search part of a very large file and you are not sure if there are any occurrences of the search text.  The "all open files" scope is also extremely useful sometimes.

Another handy facility is to be able to bookmark all occurrences (in the current scope), rather than just searching for them one at a time.  Then you can open the Bookmarks dialog to see how many occurrences were found, where they were etc.  It is also useful for "remembering" locations before making lots of changes that may make finding them again later much harder.

xxx
The CPU in most computers is usually idle at least 95% of the time, even when in active use.  We see this as a waste, which is why HexEdit automatically performs background searches.  Whenever you do a search, HexEdit starts a background search for the same text in all open files, while allowing you to continue working as normal.  The only visible difference is that the "background search" pane on the status bar will show a progress bar while the search is in progress, and will show the number of occurrences found in the whole file when the background search has completed.  Also when the search is finished all found occurences are shown with a light green background (in the default colour scheme).

Background searching occurs in a low-priority thread and has been carefully crafted not to interfere with viewing and editing or any other user-interface tasks.  Also background searching on the active file takes place at a higher priority (but still less than "normal" priority) than searches in other open files, so that occurrences are seen in the file you are working on quickly.

A major advantage of background searches is that when complete they allow you to find occurrences of the same bytes essentially instantaneously, even in huge files (even Gigabyte or Terabyte sizes).  On smaller files the background search completes almost instantly, and it is surpising how often this highlights other unexpected occurrences of the bytes you were looking for.

But the best thing about them is they are free!  You don't have to do anything other than search for something to start a background search which will then show you all occurrences.

A few other hex editors also provide so-called background searches but they have to be started manually, which loses one of the main advantages of background searches.  They also are typically slow and often interfere with other editing tasks causing a sluggish user interface or worse.

In some circumstances, HexEdit's background searches cause problems.  For example, if you are viewing a very large file across a network, background searching might cause a large amount of network traffic.  In this case you can turn them off using the System page of the Options dialog. 
xxx

CALCULATOR

xxx
Several users of HexEdit have commented on HexEdit's calculator.  "... not only is it much better than calculators provided by other hex editors, but is better thought out and nicer to use than most standalone shareware calculators."    Some people have even bought HexEdit just for the calculator.

What makes it so good?  First it is attention to details.  For example, decimals numbers are displayed with thousands separators, or according to regional conventions (ie, set in the control panel).  Hex, octal and binary numbers are grouped to you can easily read the number.  (The same system is used for other hex and decimal number boxes in HexEdit, such as the hex and decimal jump tools.)

Moreover, you can easily edit the number displayed in the calculator since it is a normal text box.  Editing of numbers still works intuitively, since arrow keys, backspace, Del etc all handle commas/spaces as if you were editing a number without their presence.  It's also very easy to cut or paste numbers or parts of numbers.

I find the Windows calculator particularly annoying and error-prone since it does not group digits.  This is bad when you have 6 or 7 digits, but when the calculator can show 30 digits, it is crazy.

[Late note: Microsoft have added a digit-grouping option to their calculator in XP.  However, it is off by default which is why I didn't notice it.]

I also find it annoying in the Windows calculator that the only editing of a number that you can do is delete the last digit (backspace), and you can't edit the result of a calculation at all!  You can copy and and paste numbers but only whole numbers.

Another example of user-interface niceties in HexEdit, is that the current binary operator in effect is shown to the right of the text box.  This is useful if you're not sure if you pressed the right button or pressed one at all as sometimes happens.

The layout of the calculator keys is more logical than most calculators.  For example, all binary operation buttons (operators that take two operands, such as addition, AND etc) are on the right, while all unary operation buttons (taking one operand, such as NOT etc) are on the left.  All operations that work with the active file are on the far left.

Another nice feature is that if a calculation overflows the value is not lost (unless it overflows 64 bits).  When you see the 'O' to the right of the number (and hear the beep) just select 64 bit mode to see the full result.

Further, even when you are working in 32 bit mode or smaller all calculations are done internally in 64 bits - just switch to 64 bit mode to see the 64 bit result.  Note that for some operations the hidden bits are removed where it would affect the result, but for many operations (AND, NOT etc) the extra bits come along for the ride.

Finally the file manipulation facities make the calculator very powerful.  And since all calculator buttons are stored in keystroke macros you can create macros that manipulate files in many different ways.  This is discussed further in the topics on integration and macros.  There is also a tutorial that demonstrates this in HexEdit 3.0 which is due for release shortly.

xxx 
The built-in calculator provides radio buttons to select between binary, octal, decimal and hex bases.  However, there is a registry setting that allows you to use any radix up to 32.

To do this close HexEdit and open this key in regedit.exe:

HKEY_CURRENT_USER\Software\ECSoftware\HexEdit\Calculator

Double-click the "Base" entry and change it to any value between 2 and 32.  Remember to set the value using decimal by clicking the "Decimal" radio button in regedit's "Edit DWORD value" dialog.

When next you open HexEdit numbers you enter will be in the new base.  For bases higher than 16 you need to use the keyboard to enter digits greater than "F", since there are no calculator buttons for them.

Apart from that, the calculator behaves exactly the same.  Note that for bases which are not binary multiples you may be able to enter some digits but not others before you overflow the number of "bits".  (This also happens in decimal mode.)

For example, in decimal mode if you have entered "25" and bits=8 then you can type any digit up to 5, but digits 6 and above will cause a "beep" due to overflow of the 8 bits (since 256 cannot fit into 8 bits).
xxx

MACROS

xxx
Keystroke macros are invaluable in any editor where you need to perform repetitive tasks.  If you find yourself doing the same process more than a few times then consider automating it with a macro.

The good thing about keystroke macros is that they are easy to create and use -- simply turn on recording and type the keystrokes to be repeated.  Unfortunately, as they get more complicated they get much harder to get correct.

We have considered adding greater programmability to HexEdit.  For example, it would be easy to add an OLE Automation interface that would allow programming from languages like VBA.  You could then more easily and reliably create complex macros, the tradeoff being that it would be much harder to create even a simple macro this way than it is to create a keystroke macro.

We have not added any other form of programmability to HexEdit (yet) since there has been no demand for it (until recently).  Instead we have enhanced keystroke macros to make them more useful.  For example, HexEdit 1.1 added the ability to save the current macro to disk.  If you save a macro with the special name "autoexec" it will be run whenever HexEdit is opened.  If you save a macro with a name consisting of a file extension preceded by an underscore that macro will be run whenever a file of that type is opened -- eg, a macro named "_exe" is run (if it exists) whenever a .EXE file is opened.

HexEdit 2.2 was enhanced to allow a macro to call another macro (to any nesting depth), and run any macro directly from disk (without affecting the current in-memory macro).  You can also display a message to the user, such as instructions, or ask for confirmation before continuing.

Many users of macros do not realise that macros are not limited to working with one file -- in fact some of the more useful macros open/create files and move data between them.  Also not just "keystrokes" are recorded but also mouse selections, menu items and even use of some dialogs.  For example, all calculator buttons are recorded in keystrokes which makes it easy to create macros that change files in powerful ways.

Despite being easy to create and use, keystroke macros are suprisingly underutilised.  We often get requests for new features which can be accomplished simply using a macro.  To encourage the greater use of macros we have added a tutorial on how to create them in the on-line help of HexEdit 3.0.

xxx

HELP

xxx
Help

HexEdit has by far the most extensive and useful help system of any hex editor available.  The on-line help file that you see when you press F1 (or select Help/Help Topics) contains a complete reference section plus several other sections to help you get started and to get the most out of it such as the Overview, Tutorials, How Do I? and Troubleshooting sections.  Many beginners particularly like the Introduction to Binary Files topics which explains what binary files are used for and what they usually contain.

Command Help

The context-sensitive help facilities built into HexEdit allow you to get instant access to the relevant reference topic.  You can get help on any command (menu-item, toolbar button or keyboard shortcut) simply by pressing Shift+F1 (or select Help/Context Help) then select the command, eg, click the toolbar button.

Menus and toolbar buttons also provide a short decription in the status bar if you hold the mouse over them.  Further, if you leave the mouse over a toolbar button for about a second a tooltip will pop up to remind you what it is for.  Also the keyboard shortcut (if any) for a command is shown to the right of menu items and in toolbar button tooltips -- and it is updated if you change your keyboard shortcuts using the Customize dialog.

Tips are also displayed for each section in the status bar if you hold the mouse over it.

Dialog Help

One of the most annoying things I find with many other programs is when you are in some obscure dialog and you can't find out (or can't remember) what a particular controls is for.  HexEdit provides context help for all controls in all dialogs.  If you click the little "?" in the top right of the dialog then click the control a description of the control pops up.  You can also get the same help by selecting the control and pressing F1 or by right-clicking it and selecting "What's This?" from the popup menu.  (Note that in HexEdit 3.0 modeless dialogs have lost the "?" (due to being made dockable) but you can still use the other methods.)

[Later note: In the final release of HexEdit 3.0 the "?" button has been added to modeless dialogs - it appears next to the "roll up" button in the title bar (3rd button from the right)]

If you want more help on a control, all dialogs (except a few trivial ones) include a Help button which takes you to a reference topic that describes in detail what the dialog, and all the controls in it, are for.

More Help


Apart from all of that HexEdit provides many other facilities to help you such as "Tip of the Day", a keyboard map showing all current keyboard shortcuts, on-line tutorials, Help via Email, and you can jump to many pages on our web site such as the FAQ (frequently asked questions) page.

Failing all that you can jump straight to out Support Forums.  Use Help/Support Pages/Forums to open the Forums in your default browser, or you can use the forums directly within the HexEdit help file by selectin the "Support Forums" topic.  If you ask a question in "Questions" forum you will generally get a response within a few days often a few hours. 
xxx


HIGHLIGHTER

xxx
As a user of hex editors for more than 20 years one thing that I have found myself doing all the time is writing down addresses of important bytes.    There are many reasons such as remembering possible errors or isolating some sort of repeated pattern (eg, when reverse-engineering a file format).

Of course, you can quickly place an unnamed bookmark (or almost as quickly a named bookmark) at any position in a file.  However, the easiest way to remember important bytes is to simply turn on the highlighter tool and "draw" the highlights with the mouse.

You can highlight any or all bytes of a file and the highlighting is efficiently stored and displayed.  Highlights are persistent (ie, remembered after you close the file).  You can also hide the highlights without losing them if they are distracting.

Highlights are shown, by default, in the traditional colour of yellow, but you can change this by changing the "Highlighter" colour of the current colour scheme.  Also note that highlights are printed -- if you use a monochrome or dot matrix printer you might need to select a lighter shade for the highlighter colour, to improve legibility of highlighted text.

Sometimes it is tempting to highlight the same repeated pattern of bytes.  For this it is usually better to simply search for the pattern and all occurrences will be highlighted automatically using the current "Search Occurrences" colour (assuming you have background searches enabled).

Also, using a named bookmark, instead of the highlighter, is useful if you want to describe what some bytes are for. xxx

TEMPLATES

xxx
xxx

LARGE FILES
-----------

* Edit files of any size
* Easily insert/delete/append in huge files
* In place saves of insertions/deletions
  * No extra disk space is required when saving
* Insert huge files into another file instantly
  * Inserted file is not read into memory
* Create new files up to 1 TB filled in various ways
* Insert blocks up to 1 TB filled in various ways
* Quickly append to huge files
* Operations can work with huge (> 4GB) selections
* Long operations can be aborted
* Long operations display a progress bar

If you need to work with large files then you need HexEdit.  No other hex editor comes close - if you don't believe this, try the following in any other hex editor:

1. Open the largest file you can find - I used a file about half a Terabyte in size in my own testing.
2. Go to the end of the file - pressing Ctrl+End generally does this.
3. Turn on insert mode if necessary, and add a single byte to the end of the file.
4. Save the file.

In HexEdit this process takes a few seconds.  Most other hex editors will crash, appear to hang or display an error at step 1 or 2.  The few that make it to step 4 will hang at that point.  (Whenever an editor "hangs" in my tests I leave them running for at least a day just to see if they recover, but none have ever done so.)


In theory you can work with files in HexEdit of up to 1 Exabyte* but current Windows filesystems limit file sizes to much smaller values - 1 Terabyte for NTFS, 4 Gigabytes for FAT32.  (ACtually my calculations indicate that the scrollbars in HexEdit will not work correctly for a file of several Petabytes, but I have not been able to test that!)


But there are more things you can do with huge files due to HexEdit's advanced file handling engine.

When you edit and save a file in HexEdit, changes will be written to the file in place (unless a backup file is to be created) even when there have been insertions or deletions.  (Other hex editors will save to a new file then delete the old one.)  This means you do not need a lot of free disk space to edit large files.  It also means that saving the file will be a lot faster since it is not necessary to write a completely new file and delete the old one.  Further, this will avoid the disk fragmentation from continually creating and deleting files.


Another great feature is that you can insert huge files into another file and continue working without any delay.  The data of the inserted file is not read into memory but is used directly from disk.  You can then continue editing the file and the file handling engine keeps track of which part of the original inserted file is used and anyn other edits transparently.  The only restriction is that the inserted file cannot be removed until you have saved the file that it is inserted into.


There are many other features of HexEdit that support large files.

In the New File dialog you can create a new file up to a Terabyte in size.  Similarly, you can insert a huge manufactured block using the Insert Block dialog.  The new data can be generated in many ways (strings, integers, real numbers, random bytes, etc).


Working with selections in huge files can be difficult as the scrollbar resolution does not have enough granularity for fine positioning.  There are various ways of making a huge selection such as:

+ set the mark and use a jump tool to go to an exact address then use the "Extend to Mark" command
+ set the cursor location and selection length precisely using the calculator


Operations on selections of more than 4 Gbytes also work correctly.  HexEdit will transparently create temporary files if changes are larger than the available virtual memory, so that changes can be undone if required.


The "Write Selection", "Append Selection" and "Append Same File" are commands that allow you to easily compose huge files on disk without requiring them to be opened in HexEdit.


Operations on a large selection can take a long time.  If an operation is taking more than a few seconds HexEdit will show a progress bar and will allow the operation to be aborted by pressing the space bar (with confirmation).  Similarly, other commands that work on the whole file (searches, macros, comparisons, etc) and may take some time on a large file can be aborted by pressing the space bar.

The HexEdit background search capability is also very useful.  If you are searching for the same bytes in a huge file it may take several minutes to find the next instance if the instances are sparse.  Background searching allows HexEdit to find all instances while you are doing other editing tasks.  Then you can jump instantly to the next instance when you are ready.


CUSTOMIZATION
-------------

* Customize toolbars
  * Modify built-in toolbars
  * Create new toolbars and buttons
  * Draw buttons using button editor
  * Resize drop list tools
  * Create new sub-menus
* Customize keyboard
  * Custom key appear in menu items
  * Custom keys appear in button tooltips
  * Display and print custom key map
* Customise the main menu
  * Add toolbar buttons to the menu bar
* Customize 5 mouse double-click events
* Customize 8 context (right-click) menus
* Set up external tools
  * Set command-line, initial directory etc
* Customizations are retained between HexEdit versions

HexEdit offers all the customization features you would expect, like the ability to modify toolbars and menus and add new keyboard shortcuts.  All commands are grouped into several categories according to where they appear on the main menu, but there are also many commands that do not appear in menus or toolbars or have keyboard shortcuts by default.


For toolbars you can not only add and move buttons but also create sub-menus of buttons or even add buttons to the main menu bar.  If you want to add a command to a toolbar and it does not have an image you can create a new image for the button or edit an existing one.  The button editor has basic image editing tools or you can create a button in a more advanced editor and paste it from the clipboard.

Like toolbars the main menu is fully customizable, including the ability to add/move/delete any command and even create and move sub-menus.  You can also set various options like menu animations, shadows and turn on personalization (where only common and recently used menu items are displayed).

You can set up a keyboard shortcut (or accelerator) for any command.  The shortcut will be shown for that command where it appears in a menu or in the tooltip for a toolbar button.  The Help/Keyboard Map command allows you to see a list of all current keyboard shortcuts which you can sort, print or copy to the clipboard.

There are also five different mouse double-click events that you can customize.  For example, when you click in the address area of the main screen the current row is selected.  You might like to change this to toggle between displaying hex or decimal addresses (View/DecimalAddresses).

Not only can you change the main menu but you can also configure eight different context (popup) menus.  These are seen when you right-click in an area of the HexEdit display.  For example, when you right-click on one of the windows tabs (for each of the currently open files) you get the option to save, close etc.  You could easily add a new command to that menu for exmaple, to select the whole file (Edit/SelectAll).

It is often useful to call up external tools from within HexEdit.  This can be accomplished easily with the Tools tab of the Customize dialog.  By default HexEdit is set up to run Windows Calculator and NotePad.  You can add other command and even specify the name of the current file on the command line (using the $(FilePath) parameter.

Finally, when you upgrade to a new release of HexEdit you will not lose your customizations.  If you have modified a built-in toolbar the upgrade process will try to merge any new items with your changes.  Of course, it is probably safer if you create a new toolbar to customize.

The customization tutorial has more information on using all of these options and more.  See HexEdit  Help/Tutorial/Customization main menu item.

There are also many other ways you can customize HexEdit.  See also Color Schemes, File Filters, Info Tips, Default Display.


DISPLAY
-------

* Window tabs to easily switch between files
* Numbers are nicely formatted
* International number formats are supported
* Many global display options
  * Display hex in upper or lower case
  * etc
* Choose any font for each editor window
  * Use font drop-list on Format toolbar
  * Choose font and atributes using the Font dialog
* Choose any font size
  * Use font size drop-list on Format toolbar
  * Use Ctrl+mouse wheel to "zoom"
  * Inc/dec font buttons
* Display hex and/or character area
* Display in the popular "stacked" mode
* Char area supports many character sets
  * ASCII, ANSI, IBM/OEM(MSDOS), EBCDIC
  * Change how control characters are shown
* Display addresses in hex and/or decimal
  * Optionally also show line numbers
* Adjust the number of columns displayed (up 32767)
  * Use "Autofit" mode to have columns fit the window
* change column grouping, start offset etc
  * Ruler controls provided for fast changes
* Display disk sector bounds

HexEdit provides many display features that make it easy to see and work with the files you want to view or edit.

The main window has a row of tabs (usually just below the main menu and toolbars) which shows tabs for all open files.  The tabs allow you to quickly see what files are open and switch between them.  Further you can right-click a tab to see a context (popup) menu of useful commands such as Save, Close etc.

xxx global display options


Within each editor window you have complete control of the display including fonts, colours, layout, etc.  You can choose any Windows font using the standard Font selection dialog.  Further, you can quickly change the current font's size using the increment/decrement font buttons (Standard toolbar) or "zoom" by using the mouse wheel while holding down the Ctrl key.  An alternative for changing the font is the Format toolbar which has drop-down lists of fonts and font sizes.  Like all formatting, font changes are retained for each file, are undoable, and can even be recorded in macros.


Traditionally, hex editors are generally laid out with an address (hex or decimal) on the left, hex area in the middle, and character area on the right.  You can edit in the hex or character area and switch between them using the tab key.  This is the default layout but HexEdit also supports some alternatives.

First you can toggle the hex and character areas separately.  In the address area you can have any combination of hex addresses, decimal addresses, and line numbers.

An alternative is what is called "stacked" mode in HexEdit.  This is apparently a layout popular on some older larger systems (IBM mainframes I believe) and was requested to be added by several people.  (I personally had never seen this layout before but have since found it very useful.)  In stacked mode bytes are laid out in rows of 3 characters, where the top row is the character for the byte in the current character set (ASCII, EBCDIC, etc) and the characters below are 2 hex characters representing the nybbles of the byte.  HexEdit fully supports all selection, editing, etc in stacked mode.


There are several other ways you can change the layout:
+ columns = how many bytes are shown per line
+ grouping = how many columns are grouped together
+ offset = column of the first byte of the file

All of these options can be quickly and simply changed by dragging controls in the ruler.

There is also a very useful "autofit" mode where the number of columns is automatically adjusted to fit across the window.


In the character area HexEdit supports several different character sets.  The simplest is ASCII, which only uses the bottom 7 bits of each byte (bytes with the high bit on are just shown as a dot).  The ANSI character set uses the high bit to display extra characters (using the default Windows code page).  How EBCDIC characters are displayed (and edited, searched etc) can be customized using the EBCDIC.TAB file.  Finally the IBM/OEM character set is ASCII + the graphics characters in the character sert ROM of the first IBM PCs and clones and used in MSDOS programs (esp. games).

Note that HexEdit does not display Unicode characters in the character area as Unicode is a double byte character set and does not fit with the byte-oriented layout of a hex editor.  However, you can see the current Unicode character for the byte at the cursor (and the following byte) using the Properties dialog.  The properties dialog also allows you to view the characters from any ANSI code page supported by your version of Windows including international character sets, EBCDIC code pages, multi-byte character sets, etc.

You can also customize how ASCII control characters are displayed (for ASCII and ANSI characters sets).  There are three options:
+ none = display as a dot
+ control char = display as the ASCII control char but in a different color (depending on the color scheme)
+ C/C++ escape sequence = the character escape sequence used in C/C++ languages (eg r = carriage return)


See also Color Schemes, Highlighter, Editing, Info Tips, Default Display.

