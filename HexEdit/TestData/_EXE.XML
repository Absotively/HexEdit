<?xml version="1.0"?>
<!DOCTYPE binary_file_format SYSTEM "BinaryFileFormat.dtd">
<binary_file_format name="WindowsEXE" type_name="" comment="" default_byte_order="little" default_read_only="false" default_char_set="ansi" web_site="http://www.csn.ul.ie/~caolan/publink/winresdump/winresdump/doc/pefile.html" expr="">
	<struct name="DOS_hdr" type_name="IMAGE_DOS_HEADER" comment="" expr=""><data type="string" name="e_magic" format="ascii" len="2" display="" type_name="WORD" domain="this == &quot;MZ&quot;" comment="File signature of executable (Mark's initials)"/><data type="int" name="e_cblp" format="signed" len="2" display="" type_name="WORD" comment="Bytes on last page of the file"/><data type="int" name="e_cp" format="signed" len="2" display="" type_name="WORD" comment="Number of page in the file"/><data type="int" name="e_crlc" format="signed" len="2" display="" type_name="WORD" comment="Relocations"/><data type="int" name="e_cparhdr" format="signed" len="2" display="" type_name="WORD" comment="Size of header in paragraphs"/><data type="int" name="e_minalloc" format="signed" len="2" display="" type_name="WORD" comment="Minimum extra paragraphs needed"/><data type="int" name="e_maxalloc" format="unsigned" len="2" display="" type_name="WORD" comment="Maximum extra paragraphs needed"/><data type="int" name="e_ss" format="signed" len="2" display="" type_name="WORD" comment="Initial SS (stack segment)"/><data type="int" name="e_sp" format="signed" len="2" display="" type_name="WORD" comment="Initial SP (stack pointer)"/><data type="int" name="e_csum" format="signed" len="2" display="" type_name="WORD" comment="checksum"/><data type="int" name="e_ip" format="signed" len="2" display="" type_name="WORD" comment="initial IP (instruction pointer)"/><data type="int" name="e_cs" format="signed" len="2" display="" type_name="WORD" comment="Initial (relative) CS (code segment)"/><data type="int" name="e_lfarlc" format="signed" len="2" display="" type_name="WORD" domain="this &gt;= 0x40" comment="File address of relocation table"/><data type="int" name="e_ovno" format="signed" len="2" display="" type_name="WORD" comment="Overlay number"/><data type="none" name="e_res" len="8" comment="reserved"/><data type="int" name="e_oemid" format="signed" len="2" display="" type_name="WORD" comment="OEM ID"/><data type="int" name="e_oeminfo" format="signed" len="2" display="" type_name="WORD" comment="OEM specific value"/><data type="none" name="e_res2" len="20" comment="reserved"/><data type="int" name="e_lfanew" format="signed" len="4" display="" type_name="LONG" comment="File address of the PE header"/></struct><data type="none" name="DOS_stub_code" len="DOS_hdr.e_lfanew - sizeof(DOS_hdr)"/><struct name="nt_hdr" type_name="IMAGE_NT_HEADERS32" comment="" expr=""><data type="string" name="Signature" format="default" len="4" domain="this == &quot;PE&quot;" display="" type_name="DWORD" comment="The characters PE (for portable executeable) followed by 2 null bytes."/><struct name="file_hdr" type_name="IMAGE_FILE_HEADER" comment="PE file header" expr=""><data type="int" name="Machine" format="signed" len="2" display="" type_name="WORD" domain="{UNKNOWN, iAPX386=332, iAPX486, Pentium, MIPS1= 354, MIPS2, MIPS3, ALPHA=388, Intel64=512, AMD64_K8=0x8664 }" comment="What sort of processor instructions are in the code sections"/><data type="int" name="sections" format="signed" len="2" display="" type_name="WORD" comment="NumberOfSections"/><data type="date" name="TimeDateStamp" format="c" display="" type_name="DWORD" comment="When the linker built this file."/><data type="int" name="symtabptr" format="signed" len="4" display="" type_name="DWORD" comment="PointerToSymbolTable"/><data type="int" name="numsyms" format="signed" len="4" display="" type_name="DWORD" comment="NumberOfSymbols"/><data type="int" name="opthdrsize" format="signed" len="2" display="" type_name="WORD" comment="SizeOfOptionalHeader"/><data type="int" name="RELOCS_STRIPPED" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="EXECUTABLE_IMAGE" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="LINE_NUMS_STRIPPED" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="LOCAL_SYMS_STRIPPED" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="AGGRESIVE_WS_TRIM" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="LARGE_ADDRESS_AWARE" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="unused" format="unsigned" len="2" display="" bits="1" direction="up" comment="unused bit"/><data type="int" name="BYTES_REVERSED_LO" format="unsigned" len="2" display="" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="BIT32_MC" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="DEBUG_STRIPPED" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="REMOVABLE_RUN_FROM_SWAP" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="NET_RUN_FROM_SWAP" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="SYSTEM_FILE" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="DLL_FILE" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="UP_SYSTEM_ONLY" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="BYTES_REVERSED_HI" format="unsigned" len="2" display="" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/></struct></struct><data type="int" name="magic" format="unsigned" len="2" display="hex" domain="{ NT32=267, NT64=523, ROM=263}"/><if test="magic == 0x10B" comment=""><struct name="NT_opthdr" type_name="IMAGE_OPTIONAL_HEADER32" comment="Entry point relative to image base"><data type="int" name="LinkerMajor" format="unsigned" len="1" display=""/><data type="int" name="LinkerMinor" format="unsigned" len="1" display=""/><data type="int" name="code_size" format="signed" len="4" display="" type_name="DWORD"/><data type="int" name="init_size" format="signed" len="4" display="" type_name="DWORD" comment="SizeOfInitializedData"/><data type="int" name="uninit_size" format="signed" len="4" display="" type_name="DWORD" comment="SizeOfUninitializedData"/><data type="int" name="entry" format="signed" len="4" display="hex" type_name="DWORD" comment="Address of entry point."/><data type="int" name="code_base" format="signed" len="4" display="hex" type_name="DWORD"/><data type="int" name="data_base" format="signed" len="4" display="hex" type_name="DWORD"/><data type="int" name="image_base" format="signed" len="4" display="hex" type_name="DWORD" comment="Virtual address of 1st byte of the file (64K multiple)"/><data type="int" name="sect_align" format="signed" len="4" display="hex" type_name="DWORD" comment="Must be power of 2 between 2^9 and 2^28)"/><data type="int" name="file_align" format="signed" len="4" display="hex" type_name="DWORD" comment="Must be power of 2 between 2^9 and 2^16)"/><data type="int" name="OSmajor" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="OSminor" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="VerMajor" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="VerMinor" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="SubMajor" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="SubMinor" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="Win32Ver" format="signed" len="4" display="" type_name="WORD"/><data type="int" name="image_size" format="signed" len="4" display="hex" type_name="DWORD" comment="Total size including headers (must be multiple of sect_align)"/><data type="int" name="header_size" format="signed" len="4" display="hex" type_name="DWORD" comment="Size of DOS hdr, PE hdr and sector table."/><data type="int" name="checksum" format="signed" len="4" display="" type_name="DWORD" comment="May be zero if not set."/><data type="int" name="subsystem" format="unsigned" len="2" display="hex" type_name="WORD" domain="{UNKNOWN, NATIVE, WIN32, CONSOLE, OS2=5, POSIX=7 }"/><data type="int" name="DLL_characteristics" format="unsigned" len="2" display="hex" type_name="WORD"/><data type="int" name="stack_reserve_size" format="unsigned" len="4" display="%d" type_name="DWORD"/><data type="int" name="stack_commit_size" format="unsigned" len="4" display="" type_name="WORD"/><data type="int" name="heap_reserve_size" format="unsigned" len="4" display="" type_name="WORD"/><data type="int" name="heap_commit_size" format="unsigned" len="4" display="" type_name="DWORD"/><data type="int" name="LoaderFlags" format="signed" len="4" display="hex" type_name="DWORD"/><data type="int" name="va_count" format="signed" len="4" display="" type_name="DWORD" comment="No of data dirs (ie size of following array)"/><eval expr="dir_no = -1" display_error="false" display_result="false" comment=""/><for name="data_dir" count="va_count" stop_test="" type_name="" comment=""><struct name="data_dir" type_name="IMAGE_DATA_DIRECTORY" comment="" expr="dir_no == 0 ? &quot;EXPORT Table&quot; : (dir_no == 1 ? &quot;IMPORT Table&quot; : (dir_no == 2 ? &quot;RESOURCE Table&quot; : (dir_no == 3 ? &quot;EXCEPTION Table&quot; : (dir_no == 4 ? &quot;SECURITY Table&quot; : (dir_no == 5 ? &quot;BASE RELOCATION Table&quot; : (dir_no == 6 ? &quot;DEBUG Directory&quot; : (dir_no == 7 ? &quot;Architecture Specific Data&quot; : (dir_no == 8 ? &quot;GLOBAL POINTER Register&quot; : (dir_no == 9 ? &quot;TLS Table&quot; : (dir_no == 10 ? &quot;LOAD CONFIG Table&quot; : (dir_no == 11 ? &quot;BOUND IMPORT Table&quot; : (dir_no == 12 ? &quot;IMPORT Address Table&quot; : (dir_no == 13 ? &quot;DELAY IMPORT Descriptor&quot; : (dir_no == 14 ? &quot;COM+ Runtime Header&quot; : &quot;Unknown&quot;))))))))))))))"><data type="int" name="va" format="unsigned" len="4" display="hex" comment="Virtual address" type_name="ULONG"/><data type="int" name="size" format="unsigned" len="4" display="" type_name="ULONG"/><eval expr="dir_no = dir_no + 1" display_error="false" display_result="false" comment=""/><if test="va &gt; 0 &amp;&amp; size &gt; 0" comment=""><jump offset="va" comment="" origin="start"><switch test="dir_no" comment=""><case range="0"><struct name="EXPORT_Table" type_name="" comment="" expr=""><data type="none" name="xxx" len="1" comment="dummy "/></struct></case><case range="1"><for name="IMPORT" count="" stop_test="this.RVAFuncNameList == 0" type_name="" comment=""><struct name="entry" type_name="" comment="" expr="this.RVAModuleName &gt; 0 ? this.ModuleName  : &quot;-----&quot;"><data type="int" name="RVAFuncNameList" format="unsigned" len="4" display="hex" type_name="DWORD" comment="Ptr to list of names"/><if test="RVAFuncNameList &gt; 0" comment=""><jump offset="RVAFuncNameList" comment="" origin="start"><for name="Addr" count="" stop_test="this.addr == 0" type_name="" comment=""><struct name="" type_name="" comment="" expr="this.addr &gt; 0 ? this.func.name : &quot;-----&quot;"><data type="int" name="addr" format="signed" len="4" display="hex"/><jump offset="addr" comment="" origin="start"><struct name="func" type_name="" comment="" expr=""><data type="int" name="ordinal" format="unsigned" len="2" display="hex"/><data type="string" name="name" format="default" display=""/></struct></jump></struct></for></jump></if><data type="int" name="" format="unsigned" len="4" display=""/><data type="int" name="" format="unsigned" len="4" display=""/><data type="int" name="RVAModuleName" format="unsigned" len="4" display="hex" type_name="DWORD"/><jump offset="RVAModuleName" comment="" origin="start"><data type="string" name="ModuleName" format="default" display=""/></jump><data type="int" name="RVAFuncAddrList" format="unsigned" len="4" display="hex" type_name="DWORD"/></struct></for></case></switch></jump></if></struct></for></struct></if><for name="section_header" count="nt_hdr.file_hdr.sections" stop_test="" type_name="" comment=""><struct name="section" type_name="IMAGE_SECTION_HEADER" comment="" expr="this.name"><data type="string" name="name" format="ascii" len="8" display="" comment="length is always 8 - given by:
#define IMAGE_SIZEOF_SHORT_NAME  8
"/><data type="int" name="virt_size" format="unsigned" len="4" display="" type_name="DWORD" comment="physical address OR virtual size (not used?)
"/><data type="int" name="RVA" comment="Relative Virtual Address.  The virtual address the object is currently relocated to, relative to the Image Base." format="unsigned" len="4" display="hex" type_name="DWORD"/><data type="int" name="phys_size" format="unsigned" len="4" display="hex" type_name="DWORD" comment="size of raw data"/><data type="int" name="phys_offset" format="unsigned" len="4" display="" type_name="DWORD" comment="pointer to raw data"/><data type="int" name="res1" format="unsigned" len="4" display="" type_name="DWORD"/><data type="int" name="res2" format="unsigned" len="4" display="" type_name="DWORD"/><data type="int" name="res3" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="res4" format="unsigned" len="2" display="" type_name="WORD"/><data type="int" name="" format="unsigned" len="4" display="hex" type_name="bit-field" comment="5 reserved bits" bits="5" direction="up"/><data type="int" name="CODE_SECTION" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Code section"/><data type="int" name="INIT_DATA_SECTION" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Initialized data section"/><data type="int" name="UNINIT_DATA_SECTION" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Uninitialized data section"/><data type="int" name="" format="unsigned" len="4" display="hex" type_name="bit-field" comment="9 reserved bits" bits="9" direction="up"/><data type="int" name="PURGEABLE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="LOCKED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="PRELOAD" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/><data type="int" name="ALIGN" format="unsigned" len="4" display="hex" type_name="bit-field" bits="4" direction="up" domain="{DEFAULT16, ALIGN1, ALIGN2, ALIGN4, ALIGN8, ALIGN16, ALIGN32, ALIGN64, ALIGN128, ALIGN256, ALIGN512, ALIGN1024, ALIGN2048, ALIGN4096, ALIGN8192, UNUSED}" comment="Alignment - default is 16 bytes"/><data type="int" name="LNK_NRELOC_OVFL" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section contains extended relocations"/><data type="int" name="MEM_DISCARDABLE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section can be discarded"/><data type="int" name="MEM_NOT_CACHED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section cannot be cached"/><data type="int" name="MEM_NOT_PAGED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section is not pageable"/><data type="int" name="MEM_SHARED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section is shared"/><data type="int" name="MEM_EXECUTE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Executable section"/><data type="int" name="MEM_READ" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Readable section"/><data type="int" name="MEM_WRITE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Writable section"/></struct></for><data type="none" name="fill" len="ii=0, section_header[0].phys_offset - (addressof(section_header) + sizeof(section_header))"/><for name="section" count="nt_hdr.file_hdr.sections" stop_test="" type_name="" comment=""><data type="none" name="section" len="ii=ii+1, section_header[ii-1].phys_size"/></for><data type="none" name="none"/>
</binary_file_format>
